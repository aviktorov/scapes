Useful Links:
    - A platform independent layer: GLFW (https://github.com/glfw/glfw) / SDL2 (https://www.libsdl.org/download-2.0.php)
    - A math library: GLM (https://github.com/g-truc/glm)
    - An asset loader: assimp (https://github.com/assimp/assimp) / TinyGLTF (https://github.com/syoyo/tinygltf)
    - An image loader: stb_image (https://github.com/nothings/stb)
    - A DDS loader: nv_dds + manual patch (https://github.com/paroj/nv_dds) / gli (https://github.com/g-truc/gli)
    - Crunch: advanced DXTn compression library (https://github.com/Unity-Technologies/crunch)

Papers:
    - Temporal Supersampling in UE4 : https://de45xmedrsdbp.cloudfront.net/Resources/files/TemporalAA_small-59732822.pdf
    - An Excursion in Temporal Supersampling: https://developer.download.nvidia.com/gameworks/events/GDC2016/msalvi_temporal_supersampling.pdf

Vulkan specific:
    - Vulkan SDK: (https://vulkan.lunarg.com/sdk/home)
    - A Vulkan loader: volk (https://github.com/zeux/volk)
    - A Vulkan memory allocator: VMA https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator

DX12 specific:
    - DirectX 12 SDK: (https://www.microsoft.com/en-us/download/details.aspx?id=6812)
    - D3D12 helper library: D3DX12 (https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3DX12)

Vulkan backend challenges:
    ✔ Video memory allocation (VMA aka Vulkan Memory Allocator) @done (7/7/2020, 10:18:02 PM)
    ✔ Pipeline variety: either add *pipeline struct to backend or create pipeline cache internally @done (7/7/2020, 10:18:03 PM)
    ✔ Render pass variety: create renderpass cache internally @done (7/7/2020, 10:18:03 PM)
    ✔ Image layout transitions @done (7/7/2020, 10:18:04 PM)
    ☐ Instance attribute bindings: either move them to separate binding (not compatible with OpenGL) or sequentially increase attribute index during pipeline creation

PBR Sandbox:
    Bugs:
        ✔ Figure out why context swap recreation is broken during resize event @done (6/5/2020, 10:54:32 PM)
        ✔ Figure out why render pass doesn't clear depth correctly @done (6/27/2020, 5:47:13 PM)
        ✔ Fix broken mipmap generation @done (7/8/2020, 7:05:02 PM)
        ☐ Figure out why creating a 1024x1024 rgba32f texture crashes the app
        ☐ Figure out why it's not possible to create rgb16f texture for normals
        ☐ Investigate why sampling from composite old mip levels gives wrong ssr reprojection
    Improvements:
        ✔ Remove vulkan dependencies from VulkanTexture @done (7/7/2020, 10:17:57 PM)
        ✔ Migrate ImGui renderer to backend @done (7/14/2020, 8:48:46 PM)
        ✔ Create separate cmake script for backend @done (7/26/2020, 10:19:07 PM)
        ✔ Organize, move & renames files in vulkan backend @done (7/14/2020, 8:48:45 PM)
        ✔ Organize files in the engine @done (7/7/2020, 10:17:53 PM)
    Future:
        ☐ Figure out different probability density functions for different NDF
        ☐ Implement Oren-Nayar diffuse BRDF
        ☐ Implement microfacet Burley 12 diffuse BRDF
        ☐ Create a material class (holds textures, shaders & UBO for material params)
        ☐ Add support for other platforms (Linux, MacOS, iOS, Android)
        ☐ HBAO / HBAO+
        ☐ VXAO
        ☐ Multiscattering GGX + Shlick
        ☐ Render Backend Improvements
            ☐ Add CommandQueue structure
            ☐ Improve pipeline layout invalidation
            ☐ Improve pipeline creation by using 'pipeline inheritance'
        ☐ Temporal Filter Improvements
            ☐ Tone map -> TAA accumulate -> Reverse Tone Map
        ☐ SSR Trace Improvements: trace rays in screen space via DDA
            http://jcgt.org/published/0003/04/04/paper.pdf
        ☐ Animate blue noise for better TAA sampling
        ☐ Remove unnecessary calculations in SSR motion vectors (i.e. reflectedPointNDC and so on)
    Next Up:
        ☐ Directional light & shadows
        ☐ Environment / Reflection probes
        ☐ Area lights
        ☐ Add RenderScene class
        ☐ Add FileWatcher for shader auto reloading
        ☐ Add simple FileSystem with data root path for simplified content loading
        ☐ First person camera (WASD controls & mouse aim)
        ☐ Try entt
        ☐ Data-driven render graph + REPL
        ☐ Resource management + REPL
    Stream 66:
        ☐ Rename Scene to Importer
        ☐ Create template based resource manager
        ☐ Create Common ecs module
            ☐ Move Transform component to CommonModule
            ☐ Add CommonModule as a dependency to RenderModule
    Stream 65:
        ☐ Make another release
            ✔ Make sure shaderc is either removed or linked statically @done (7/31/2021, 5:29:24 AM)
            ✔ Try to include game API if have time @done (7/31/2021, 3:19:02 AM)
        ✔ Try to abstract flecs::world & flecs::entity behind own 'render backend'-like API @done (7/31/2021, 2:53:12 AM)
            ✔ Add ability to create entities in Scene class @done (7/31/2021, 12:25:54 AM)
            ✔ Add component management API @done (7/31/2021, 12:25:52 AM)
            ✔ Scene -> World @done (7/31/2021, 12:25:51 AM)
    Stream 64:
        ✔ Add systems to ecs::render @done (7/21/2021, 12:01:48 AM)
            ✔ Draw all renderables @done (7/21/2021, 12:01:50 AM)
            ✔ Draw all lights @done (7/21/2021, 12:01:51 AM)
        ✔ Use ecs::render systems in RenderGraph @done (7/21/2021, 12:01:54 AM)
            ✔ GBuffer rendering @done (7/21/2021, 12:01:55 AM)
            ✔ LBuffer rendering @done (7/21/2021, 12:01:56 AM)
    Stream 63:
        ✔ Make first release on github @done (7/8/2021, 8:34:42 PM)
        ✔ Try flecs @done (7/8/2021, 11:59:44 PM)
    Stream 62:
        ✔ Move high-level render mesh / shader / swap chain / texture classes to app @done (7/6/2021, 11:03:17 PM)
        ✔ Decouple render/shaders module from render/backend module @done (7/6/2021, 11:38:49 PM)
        ✔ Move public backend / shader headers to dedicated folder and call it engine API @done (7/6/2021, 11:03:13 PM)
    Stream 61:
        ✔ Add PipelineState structure @done (7/3/2021, 3:30:01 AM)
        ✔ Get rid of RenderPrimitive @done (7/3/2021, 3:30:00 AM)
        ✔ Add multiple vertex stream support to PSO @done (7/3/2021, 3:29:59 AM)
    Stream 60:
        ✔ Add RenderPass structure @done (6/30/2021, 12:22:15 AM)
    Stream 59:
        ✘ Remove virtual functions from Driver @cancelled (6/27/2021, 4:23:35 AM)
    Stream 58:
        ✔ Do clean up in shaders @done(21-06-22 01:56)
            ✔ Orgranize shaders folder structure @done(21-06-21 21:07)
            ✔ Either add .inc to GLSL extensions or replace it to .h @done(21-06-21 21:07)
            ✔ Extract common functions from brdf.inc to common.inc @done(21-06-21 23:10)
            ✔ Rename RenderState.inc to application.inc and move functions to common.inc @done(21-06-21 23:10)
            ✔ Add GBuffer struct to gbuffer.inc and samling helpers @done(21-06-21 23:10)
    Stream 57:
        ✔ Do clean up in render graph @done (3/26/2021, 9:08:55 PM)
            ✔ Make sure temporal filter can take any motion vectors (could be gbuffer or ssr velocity) @done (3/26/2021, 8:39:10 PM)
            ✔ Restore TAA supersampling @done (3/26/2021, 8:39:15 PM)
            ✔ Make temp SSR resolve buffer (linear indirect specular color + ssr motion vectors) @done (3/26/2021, 9:08:54 PM)
    Stream 56:
        ✔ Fix specular reflection temporal reprojection @done (3/16/2021, 8:41:01 PM)
        ✔ Temporal Reprojection Improvements: neighborhood clamping / clipping @done (3/16/2021, 8:40:51 PM)
    Stream 55:
        ✔ Implement old frame reprojection @done (3/1/2021, 9:25:20 PM)
        ✔ Add velocity buffer to gbuffer @done (3/1/2021, 9:26:51 PM)
    Stream 54:
        ✔ Add camera jitter @done (2/19/2021, 9:50:25 PM)
            ✔ Add frame counter (up tp 16) @done (2/19/2021, 9:50:26 PM)
            ✔ Add samples @done (2/19/2021, 9:50:26 PM)
                ✔ Uniform grid @done (2/19/2021, 9:50:27 PM)
                ✔ Halton 2,3 @done (2/19/2021, 10:37:22 PM)
        ✔ Add temporal accumulation for the whole frame @done (2/19/2021, 9:50:28 PM)
        ✔ Unify temporal accumulation pass for SSR & TAA @done (2/19/2021, 11:00:14 PM)
    Stream 53:
        ✔ Add SSR temporal filter @done (2/16/2021, 10:16:59 PM)
            ✔ Add naive jitter (blue noise offset) @done (2/16/2021, 10:17:00 PM)
            ✔ Add accumulation pass (w/o reprojection) @done (2/16/2021, 10:17:00 PM)
    Stream 52:
        ✔ Sample old color with mips @done (2/9/2021, 9:27:07 PM)
    Stream 51:
        ✔ Move shaderc outside render backend @done (2/5/2021, 9:25:52 PM)
    Stream 50:
        ✔ Clean up swap chain creation @done (2/2/2021, 10:05:11 PM)
    Stream 49:
        ✔ Improve trace ray hit mask @done (10/29/2020, 9:32:59 PM)
    Stream 48:
        ✔ Add gaussian weighted offsets to resolve pass @done (10/28/2020, 8:58:15 PM)
        ✔ Sample blue noise & randomly rotate offsets @done (10/28/2020, 8:58:16 PM)
    Stream 47:
        ✔ Get random microfacet normal in roughness cone for SSR @done (10/24/2020, 6:09:31 PM)
        ✔ Split SSR into trace & resolve passes @done (10/24/2020, 7:23:14 PM)
    Stream 46:
        ✘ Blur SSR according to roughness @cancelled (10/14/2020, 8:34:15 PM)
        ✔ Fade SSR near uv borders @done (10/14/2020, 8:20:27 PM)
        ✔ Fade SSR negative z reflection vectors @done (10/14/2020, 8:20:26 PM)
    Stream 45:
        ✔ Fix skylight shading @done (10/13/2020, 8:08:55 PM)
        ✔ Fix artifacts for roughness set to 0 and 1 @done (10/13/2020, 9:08:25 PM)
    Stream 44:
        ✔ Add precision steps for refined SSR intersections @done (10/12/2020, 7:55:57 PM)
        ✔ Mix SSR according to gbuffer shading @done (10/12/2020, 8:26:18 PM)
    Stream 43:
        ✔ Implement simple SSR ray tracing @done (10/1/2020, 9:31:31 PM)
    Stream 42:
        ✔ Add random rotation vectors to SSAO kernel @done (9/15/2020, 8:13:05 PM)
        ✔ Add SSAO blur pass @done (9/15/2020, 9:09:58 PM)
    Stream 41:
        ✔ Fix gbuffer normal storage @done (9/6/2020, 1:41:26 AM)
        ✔ SSAO @done (9/6/2020, 1:23:36 AM)
    Stream 40:
        ✔ Integrate tracy for CPU / GPU profiling @done (8/28/2020, 9:10:05 PM)
        ✔ Identify bottlenecks @done (8/28/2020, 9:10:06 PM)
    Stream 39:
        ✔ Split HDR, tonemapping & gamma correction to render passes @done (7/27/2020, 2:28:17 AM)
            ✔ Add composite pass with tonemapping @done (7/27/2020, 2:28:17 AM)
            ✔ Add post processing passes @done (7/27/2020, 2:28:18 AM)
    Stream 38:
        ✔ Extract SkyLight fron Renderer @done (7/8/2020, 11:49:20 PM)
        ✔ Add lbuffer pass and fill it with SkyLight @done (7/9/2020, 3:13:26 AM)
    Stream 37:
        ✔ Write simple scene importer @done (7/4/2020, 11:11:13 PM)
        ✔ Add gbuffer pass @done (7/4/2020, 11:11:05 PM)
    Stream 36:
        ✔ Move image layout transitions to backend @done (6/30/2020, 10:25:07 PM)
        ✔ Migrate other renderers to backend @done (7/1/2020, 12:20:13 AM)
    Stream 35:
        ✔ Finish backend drawing methods @done (6/21/2020, 2:38:52 AM)
            ✔ Add pipeline layout cache to backend @done (6/21/2020, 2:38:52 AM)
            ✔ Add pipeline cache to backend @done (6/21/2020, 2:38:53 AM)
    Stream 34:
        ✔ Continue drafting backend drawing methods @done (6/19/2020, 1:36:23 AM)
            ✔ Add context to vulkan driver which will store current state & bind sets & shaders @done (6/19/2020, 1:36:23 AM)
            ✔ Add render state management @done (6/19/2020, 1:36:22 AM)
    Stream 33:
        ✔ Start drafing binding methods @done (6/17/2020, 3:07:04 AM)
            ✔ Add BindSet struct to backend @done (6/17/2020, 2:05:55 AM)
            ✔ Add descriptor set layout cache @done (6/17/2020, 3:07:02 AM)
            ✔ Add descriptor set cache @done (6/17/2020, 3:07:03 AM)
    Stream 32:
        ✔ Start drafting backend drawing methods @done (6/14/2020, 1:09:03 AM)
            ✔ Add render pass cache to backend @done (6/14/2020, 1:09:02 AM)
            ✔ Implement beginRenderPass / endRenderPass @done (6/14/2020, 1:09:02 AM)
    Stream 31:
        ✔ Add CommandBuffer implementation to Vulkan backend @done (6/9/2020, 1:14:10 AM)
    Stream 30:
        ✔ Figure out how to implement acquire / present in render backend for swap chain @done (6/6/2020, 11:48:35 PM)
            ✔ Migrate color / depth to backend structures @done (6/6/2020, 9:10:25 PM)
            ✔ Migrate frames to backend structures @done (6/6/2020, 11:13:56 PM)
            ✔ Split frame rendering & presentation @done (6/6/2020, 11:33:57 PM)
            ✔ Move presentation related stuff to swap chain backend @done (6/6/2020, 11:48:34 PM)
    Stream 29:
        ✔ Finish swap chain implementation for Vulkan backend @done (6/5/2020, 10:34:16 PM)
            ✔ Implement Driver::destroySwapChain method @done (6/5/2020, 8:43:47 PM)
            ✔ Implement platform-dependent surface creation @done (6/5/2020, 9:27:25 PM)
            ✔ Implement swap chain transient object creation @done (6/5/2020, 10:34:05 PM)
    Stream 28:
        ✔ Add swap chain API to backend @done (4/29/2020, 2:14:53 AM)
    Stream 27:
        ✔ Add render target API implementation to Vulkan backend @done (4/4/2020, 8:07:28 PM)
        ✔ Add shader API implementation to Vulkan backend @done (4/4/2020, 8:07:27 PM)
    Stream 26:
        ✔ Finish with textures in Vulkan backend @done (3/31/2020, 2:48:56 AM)
    Stream 25:
        ✔ Replace swapchain map/unmap calls to raw ptrs + memcpy @done (3/29/2020, 4:13:31 AM)
        ✘ Add VulkanGraphicsProgram class @cancelled (3/29/2020, 4:10:15 AM)
        ✔ Make a simple VulkanRenderer interface with basic API (dip, binds, beginFrame / endFrame) @done (3/29/2020, 4:10:19 AM)
    Stream 24:
        ✔ Split application code from engine code @done (3/22/2020, 3:20:09 AM)
        ✔ Add separate cmakelists files for app & engine @done (3/22/2020, 3:20:10 AM)
    Stream 23:
        ✔ Remove platform dependent code from VulkanContext @done (3/10/2020, 2:53:22 AM)
        ✔ Move present queue fetch & surface creation to VulkanSwapChain @done (3/10/2020, 2:53:21 AM)
    Stream 22:
        ✔ Add orbit camera @done (2/29/2020, 11:53:21 PM)
        ✔ Check if roughness / metalness shading is correct compared to Marmoset @done (3/1/2020, 3:56:47 AM)
    Stream 21:
        ✔ Bake prefiltered IBL to cubemap mips @done (2/16/2020, 12:30:46 AM)
    Stream 20:
        ✔ Bake BRDF to a separate 2D texture @done (2/5/2020, 12:47:57 AM)
    Stream 19:
        ✔ Bake specular IBL @done (2/3/2020, 8:40:15 PM)
    Strean 18:
        ✔ Move Vulkan initialization from VulkanApplication to VulkanRendererContext class @done (1/14/2020, 1:26:58 AM)
    Stream 17:
        ✔ Add temporary 'reload shaders' button to ImGui @done (1/11/2020, 1:17:28 AM)
        ✔ Use #include parser from shaderc @done (1/11/2020, 12:27:38 AM)
    Stream 16:
        ✔ Move framebuffer/commandbuffer/ubo from VulkanRenderer to VulkanApplication as it's swapchain dependent @done (12/26/2019, 4:42:01 AM)
    Stream 15:
        ✔ Deduce shader kind from extension @done (11/26/2019, 12:44:58 AM)
        ✔ Deduce texture type (HDR or LDR) from extension @done (11/26/2019, 12:21:15 AM)
    Stream 14:
        ✔ Get rid of all hardcoded paths @done (11/23/2019, 2:42:39 AM)
        ✔ Add environment selection UI @done (11/23/2019, 3:37:47 AM)
    Stream 13:
        ✔ Integrate imgui 3rdparty @done (11/18/2019, 10:50:58 PM)
        ✔ Add debug parameter overrides for metalness & roughness @done (11/18/2019, 11:21:15 PM)
    Stream 12:
        ✔ Implement specular IBL in a naive way @done (11/7/2019, 2:11:46 AM)
    Stream 11:
        ✔ Create HDR cubemaps @done (11/6/2019, 2:00:35 AM)
    Stream 10:
        ✔ Refactor cubemap renderer to allow passing custom fragment shaders @done (9/18/2019, 9:03:09 PM)
        ✔ Render diffuse irradiance cubemap @done (9/18/2019, 9:03:09 PM)
    Stream 9:
        ✔ Debug cubemap renderer @done (9/18/2019, 9:02:22 PM)
    Stream 8:
        ✔ Add support for cubemaps to VulkanTexture class @done (9/15/2019, 7:54:57 PM)
        ✔ Render equirectangular hdr image to hdr cubemap @done (9/15/2019, 9:01:27 PM)
        ✔ Add cube sampler binding to the shader @done (9/15/2019, 9:01:28 PM)
    Stream 7:
        ✔ Transition image layout to present optimal @done (9/14/2019, 10:22:15 PM)
        ✔ Create another graphics pipeline for cubemap rendering @done (9/15/2019, 12:16:44 AM)
        ✔ Render equirectangular hdr image as cubemap @done (9/15/2019, 12:43:31 AM)
    Stream 6:
        ✔ Create pipeline builder class @done (9/14/2019, 1:48:30 AM)
    Stream 5:
        ✔ Fix microfacet BRDF & shading @done (9/12/2019, 11:29:40 PM)
        ✔ Implement IBL (naive) in the shader @done (9/13/2019, 12:56:33 AM)
        ✔ Add support for cube (hdri?) textures @done (9/13/2019, 1:12:11 AM)
    Stream 4:
        ✔ Orient helmet properly @done (9/1/2019, 6:42:51 PM)
        ✔ Add emission texture @done (9/1/2019, 6:57:24 PM)
        ✔ Implement microfacet BRDFs @done (9/1/2019, 8:36:34 PM)
            ✔ GGX + Shlick @done (9/1/2019, 8:33:05 PM)
    Stream 3:
        ✔ Add normals to vertex layout @done (8/24/2019, 7:38:07 PM)
        ✔ Find a good model with PBR textures @done (8/24/2019, 7:59:23 PM)
        ✔ Create a simple light right in the shader @done (8/24/2019, 8:51:42 PM)
        ✔ Implement diffuse BRDFs @done (8/24/2019, 11:45:52 PM)
            ✔ Lambert @done (8/24/2019, 9:21:04 PM)
            ✔ Half Lambert @done (8/24/2019, 9:21:04 PM)
        ✔ Implement specular BRDFs @done (8/24/2019, 11:45:51 PM)
            ✔ Blinn / Phong @done (8/24/2019, 10:54:19 PM)
    Stream 2:
        ✔ Replace git submodules to CMake 'find x' scripts @done (8/13/2019, 1:10:05 AM)
        ✔ Put all prebuilt 3rdparty libraries & headers to 3rdparty folder @done (8/13/2019, 1:10:06 AM)
        ✔ Move shaderc to 3rdparty and shaderc specific env variable to FindShaderC cmake module @done (8/13/2019, 1:38:10 AM)
    Stream 1:
        ✔ Find a good shader language frontend with SPIR-V support @done (8/10/2019, 5:33:46 PM)
        ✔ Integrate SPIR-V shader language frontend it into the engine @done (8/10/2019, 6:40:41 PM)
